0. Запуск shell
    python manage.py shell
1. Создать двух пользователей (с помощью метода User.objects.create_user).
импортируем модель

    from news.models import User

    user1 = User.objects.create_user('Pitter_Parker')
    user2 = User.objects.create_user('Tomas_Shelby')

2. Создать два объекта модели Author, связанные с пользователями.

from  news.models import Author    

    author1=Author.objects.create(user=user1)
    author1=Author.objects.create(user=user2) 

3. Добавить 4 категории в модель Category.

from news.models import Category      
    Cat1=Category.objects.create(name='sport') 
    Cat2=Category.objects.create(name='politics') 
    Cat3=Category.objects.create(name='education') 
    Cat4=Category.objects.create(name='culture')  

4. Добавить 2 статьи и 1 новость. 

    from news.models import Post  
    p1=Post.objects.create(author=author1, choice_types='NE', news_title='Battle Royale', news_text='fortnite') 
    p2=Post.objects.create(author=author2, choice_types='NE', news_title='MMORPG', news_text='DOTA2')  
    p3=Post.objects.create(author=author1, choice_types='AR', news_title='MMORPG', news_text='DOTA2') 
    p4=Post.objects.create(author=author1, choice_types='AR', news_title='sssss', news_text='very')

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

    p1.categories.add(Cat4) 
    p2.categories.add(Cat1) 
    p3.categories.add(Cat2) 
    p4.categories.add(Cat4)     
    p4.categories.add(Cat1) 
    p3.categories.add(Cat2) 
    p2.categories.add(Cat3)  
    p1.categories.add(Cat3) 

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

    comment1 = Comment.objects.create(post=p1, user=user2, comment_text='Текст комментария')
    comment2=Comment.objects.create(post=p1, user=user1, comment_text='Че то')              
    comment3=Comment.objects.create(post=p2, user=user2, comment_text='вау')   
    comment4=Comment.objects.create(post=p3, user=user1, comment_text='Nice') 

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

    Comment.objects.get(id=1).like()
    p1 = Post.objects.get(pk=1)
    p1.like()
    p1.post_rating

8. Обновить рейтинги пользователей.

    User1 = Author.objects.get(id=1)
    User1.update_rating()
    User1.user_rate

    User2 = Author.objects.get(id=2)

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

    best_user = Author.objects.order_by('-rating').first()
    print(f"Лучший пользователь: {best_user.user.username}, рейтинг: {best_user.rating}")
    Лучший пользователь: Tomas_Shelby, рейтинг: 0

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

    best_post = Post.objects.order_by('-news_rating').first()
    print(f"Лучшая статья: {best_post.news_title}, рейтинг: {best_post.news_rating}, превью: {best_post.preview()}")

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

    comments = Comment.objects.filter(post=best_post)
    for comment in comments:
    print(f"Дата: {comment.time_in_comment}, Пользователь: {comment.user.username}, Рейтинг: {comment.comment_rating}, Текст: {comment.comment_text}")


